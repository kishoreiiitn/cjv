webpackHotUpdate_N_E("pages/index",{

/***/ "../flowjv/dist/jsonexpression/index.js":
/*!**********************************************!*\
  !*** ../flowjv/dist/jsonexpression/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDependencies = exports.execJSONExpression = void 0;\nvar immutable_1 = __webpack_require__(/*! ../helper/immutable */ \"../flowjv/dist/helper/immutable.js\");\nvar execJSONExpression = function (logic, data) {\n    data.refPath = data.refPath || [];\n    if (typeof logic === \"number\" ||\n        typeof logic === \"string\" ||\n        typeof logic === \"boolean\") {\n        return logic;\n    }\n    if (typeof logic === \"function\") {\n        return logic({\n            data: data.data,\n            context: data.context,\n            ref: immutable_1.get(data.data, data.refPath),\n        });\n    }\n    if (!Array.isArray(logic) && typeof logic === \"object\") {\n        return logic.func({\n            data: data.data,\n            context: data.context,\n            ref: immutable_1.get(data.data, data.refPath),\n        });\n    }\n    var _a = __read(logic), command = _a[0], args = _a.slice(1);\n    switch (logic[0]) {\n        // Data Access Operation.\n        case \"$ref\": {\n            return immutable_1.get(data.data, data.refPath);\n        }\n        case \"$context\":\n            var _b = __read(logic, 3), _ = _b[0], key = _b[1], defaultValue = _b[2];\n            var refPath = key.split(\".\");\n            return immutable_1.get(data.context, refPath, defaultValue);\n        case \"$data\": {\n            var _c = __read(logic, 3), _1 = _c[0], key_1 = _c[1], defaultValue_1 = _c[2];\n            var refPath_1 = key_1.split(\".\");\n            return immutable_1.get(data.data, refPath_1, defaultValue_1);\n        }\n        case \"!\": {\n            var _d = __read(logic, 2), _2 = _d[0], arg = _d[1];\n            return !exports.execJSONExpression(arg, data);\n        }\n        // Logical operators\n        case \"?:\": {\n            var _e = __read(logic[0], 4), _3 = _e[0], cond = _e[1], case1 = _e[2], case2 = _e[3];\n            if (exports.execJSONExpression(cond, data)) {\n                return exports.execJSONExpression(case1, data);\n            }\n            return exports.execJSONExpression(case2, data);\n        }\n        case \"enum\": {\n            var _f = __read(logic), _4 = _f[0], val = _f[1], enums = _f.slice(2);\n            var value = exports.execJSONExpression(val, data);\n            var enumValues = new Set(enums.map(function (v) { return exports.execJSONExpression(v, data); }));\n            if (enumValues.has(value)) {\n                return true;\n            }\n            return false;\n        }\n        // ASSERT CHAIN OPS\n        case \"===\": {\n            var _g = __read(logic), _5 = _g[0], args_1 = _g.slice(1);\n            return helper.assertChainOp(helper.mapExpToValue(args_1, data), function (v1, v2) { return v1 === v2; });\n        }\n        case \"!==\": {\n            var _h = __read(logic), _6 = _h[0], args_2 = _h.slice(1);\n            return helper.assertChainOp(helper.mapExpToValue(args_2, data), function (v1, v2) { return v1 !== v2; });\n        }\n        case \">\": {\n            var _j = __read(logic), _7 = _j[0], args_3 = _j.slice(1);\n            return helper.assertChainOp(helper.mapExpToValue(args_3, data), function (v1, v2) { return v1 > v2; });\n        }\n        case \">=\": {\n            var _k = __read(logic), _8 = _k[0], args_4 = _k.slice(1);\n            return helper.assertChainOp(helper.mapExpToValue(args_4, data), function (v1, v2) { return v1 >= v2; });\n        }\n        case \"<\": {\n            var _l = __read(logic), _9 = _l[0], args_5 = _l.slice(1);\n            return helper.assertChainOp(helper.mapExpToValue(args_5, data), function (v1, v2) { return v1 < v2; });\n        }\n        case \"<=\": {\n            var _m = __read(logic), _10 = _m[0], args_6 = _m.slice(1);\n            return helper.assertChainOp(helper.mapExpToValue(args_6, data), function (v1, v2) { return v1 <= v2; });\n        }\n        // CHAIN OPS\n        case \"||\": {\n            var _o = __read(logic), _11 = _o[0], args_7 = _o.slice(1);\n            return helper.chainOp(helper.mapExpToValue(args_7, data), function (v1, v2) { return v1 || v2; });\n        }\n        case \"&&\": {\n            var _p = __read(logic), _12 = _p[0], args_8 = _p.slice(1);\n            return helper.chainOp(helper.mapExpToValue(args_8, data), function (v1, v2) { return v1 && v2; });\n        }\n        case \"+\": {\n            var _q = __read(logic), _13 = _q[0], args_9 = _q.slice(1);\n            return helper.chainOp(helper.mapExpToValue(args_9, data), function (v1, v2) { return v1 + v2; });\n        }\n        case \"-\": {\n            var _r = __read(logic), _14 = _r[0], args_10 = _r.slice(1);\n            return helper.chainOp(helper.mapExpToValue(args_10, data), function (v1, v2) { return v1 - v2; });\n        }\n        case \"*\": {\n            var _s = __read(logic), _15 = _s[0], args_11 = _s.slice(1);\n            return helper.chainOp(helper.mapExpToValue(args_11, data), function (v1, v2) { return v1 * v2; });\n        }\n        case \"/\": {\n            var _t = __read(logic), _16 = _t[0], args_12 = _t.slice(1);\n            return helper.chainOp(helper.mapExpToValue(args_12, data), function (v1, v2) { return v1 / v2; });\n        }\n        case \"%\": {\n            var _u = __read(logic), _17 = _u[0], args_13 = _u.slice(1);\n            return helper.chainOp(helper.mapExpToValue(args_13, data), function (v1, v2) { return v1 % v2; });\n        }\n        case \"str:fmt:email\": {\n            var _v = __read(logic, 2), _18 = _v[0], arg = _v[1];\n            var regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            var value = exports.execJSONExpression(arg, data);\n            if (typeof value === \"string\")\n                return regex.test(value);\n            else\n                return false;\n        }\n        case \"str:len\": {\n            var _w = __read(logic, 2), _19 = _w[0], arg = _w[1];\n            var value = exports.execJSONExpression(arg, data);\n            if (typeof value !== \"string\") {\n                return 0;\n            }\n            return value.length;\n        }\n    }\n};\nexports.execJSONExpression = execJSONExpression;\nvar helper = {\n    mapExpToValue: function (exps, data) {\n        return exps.map(function (exp) { return exports.execJSONExpression(exp, data); });\n    },\n    chainOp: function (values, operation) {\n        return values.reduce(function (agg, v, i) { return (i === 0 ? agg : operation(agg, v)); }, values[0]);\n    },\n    assertChainOp: function (values, operation) {\n        for (var i = 1; i < values.length; i++) {\n            if (!operation(values[i - 1], values[i])) {\n                return false;\n            }\n        }\n        return true;\n    },\n};\n// If getDependencies return null, it means it dependencies cannot be determined.\nfunction getDependencies(expr) {\n    var e_1, _a, _b, _c, _d, _e;\n    var _f, _g, _h, _j, _k, _l, _m, _o;\n    var dependsOn = {\n        data: [],\n        context: [],\n    };\n    if (typeof expr === \"number\" ||\n        typeof expr === \"string\" ||\n        typeof expr === \"boolean\") {\n        return dependsOn;\n    }\n    if (typeof expr === \"function\") {\n        return null;\n    }\n    if (!Array.isArray(expr) && typeof expr === \"object\") {\n        return {\n            data: (_g = (_f = expr.deps) === null || _f === void 0 ? void 0 : _f.data) !== null && _g !== void 0 ? _g : [],\n            context: (_j = (_h = expr.deps) === null || _h === void 0 ? void 0 : _h.context) !== null && _j !== void 0 ? _j : [],\n        };\n    }\n    // Logic for dependencies goes here.\n    var _p = __read(expr), command = _p[0], args = _p.slice(1);\n    args = args !== null && args !== void 0 ? args : [];\n    try {\n        for (var args_14 = __values(args), args_14_1 = args_14.next(); !args_14_1.done; args_14_1 = args_14.next()) {\n            var arg = args_14_1.value;\n            if (typeof arg === \"number\" ||\n                typeof arg === \"string\" ||\n                typeof arg === \"boolean\") {\n                continue;\n            }\n            if (typeof arg === \"function\") {\n                return null;\n            }\n            if (!Array.isArray(arg) && typeof arg === \"object\") {\n                ((_k = arg.deps) === null || _k === void 0 ? void 0 : _k.data) && (_b = dependsOn.data).push.apply(_b, __spread((_l = arg.deps) === null || _l === void 0 ? void 0 : _l.data));\n                ((_m = arg.deps) === null || _m === void 0 ? void 0 : _m.context) && (_c = dependsOn.context).push.apply(_c, __spread((_o = arg.deps) === null || _o === void 0 ? void 0 : _o.context));\n                continue;\n            }\n            var deps = getDependencies(arg);\n            if (deps === null) {\n                return null;\n            }\n            deps.data && (_d = dependsOn.data).push.apply(_d, __spread(deps.data));\n            deps.context && (_e = dependsOn.context).push.apply(_e, __spread(deps.context));\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (args_14_1 && !args_14_1.done && (_a = args_14.return)) _a.call(args_14);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return dependsOn;\n}\nexports.getDependencies = getDependencies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../flowjv/dist/jsonexpression/index.js\n");

/***/ })

})